<?php
/*
* ProBot Version: 3.0
* Laravel Version: 10x
* Description: This source file "app/Http/_AppointmentController.php" was generated by ProBot AI.
* Date: 2/22/2025 10:06:35 PM
* Contact: towhid1@outlook.com
*/
namespace App\Http\Controllers;
use App\Http\Controllers\Controller;
use App\Models\Appointment;
use App\Models\Department;
use App\Models\DoctorAvailability;
use App\Models\Doctors\Doctor;
use App\Models\Patient\Patient;
use App\Models\Status;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\DB;
use Illuminate\Pagination\Paginator;
class AppointmentController extends Controller{
	public function index(){
		$appointments = Appointment::all();
		return view("pages.erp.appointment.index",["appointments"=>$appointments]);
	}
	// public function create(){
	// 	return view("pages.erp.appointment.create",["status"=>Status::all()]);
	// }
	public function create() {
		$patients = Patient::all();
        $doctors = Doctor::all();
		$status = Status::all();
		$users = User::all();
		$departments = Department::all();
		$doctoravailability = DoctorAvailability::all();
        return view('pages.erp.appointment.create', compact('doctors', 'status', 'users', 'patients', 'departments', 'doctoravailability'));
    }
	// public function store(Request $request){
	// 	//Appointment::create($request->all());
	// 	$appointment = new Appointment;
	// 	$appointment->id=$request->id;
	// 	$appointment->doctor_id=$request->doctor_id;
	// 	$appointment->patient_id=$request->patient_id;
	// 	$appointment->appointment_date=$request->appointment_date;
	// 	$appointment->appointment_time=$request->appointment_time;
	// 	$appointment->status_id=$request->status_id;
	// 	$appointment->cancellation_reason=$request->cancellation_reason;
	// 	date_default_timezone_set("Asia/Dhaka");
	// 	$appointment->created_at=date('Y-m-d H:i:s');
	// 	date_default_timezone_set("Asia/Dhaka");
	// 	$appointment->updated_at=date('Y-m-d H:i:s');

	// 	$appointment->save();

	// 	return back()->with('success', 'Created Successfully.');
	// }
	public function store(Request $request) {
        $request->validate([
			'department_id' => 'required|exists:departments,id',
            'doctor_id' => 'required|exists:doctors,id',
            'patient_id' => 'nullable|exists:patients,id',
            'appointment_date' => 'required|date|after_or_equal:today',
            'appointment_time' => 'required',
			// Validation for walk-in patient details if patient_id is null
			'walking_user_name' => 'required_if:patient_id,null',
			'walking_name' => 'required_if:patient_id,null|string|max:255',
			'walking_date_of_birth' => 'required_if:patient_id,null|date',
			'walking_email' => 'required_if:patient_id,null',
			'walking_contact_number' => 'required_if:patient_id,null',
			'walking_emergency_contact' => 'required_if:patient_id,null',
			'walking_address' => 'required_if:patient_id,null',
			'walking_gender' => 'required_if:patient_id,null',
			'walking_blood_group' => 'required_if:patient_id,null',
        ]);

        // If patient_id is null, create a walk-in patient
        if (!$request->patient_id) {
            $patient = Patient::create([
				'user_id' => $request->walking_user_name,
				'name' => $request->walking_name,
				'date_of_birth' => $request->walking_date_of_birth,
				'email' => $request->walking_email,
				'contact_number' => $request->walking_contact_number,
				'emergency_contact' => $request->walking_emergency_contact,
				'address' => $request->walking_address,
				'gender' => $request->walking_gender,
				'blood_group' => $request->walking_blood_group,
            ]);
            $patient_id = $patient->id;
        } else {
            $patient_id = $request->patient_id;
        }

        // Check doctor availability
        $existingAppointment = Appointment::where('doctor_id', $request->doctor_id)
            ->where('appointment_date', $request->appointment_date)
            ->where('appointment_time', $request->appointment_time)
            ->exists();

        if ($existingAppointment) {
            return back()->with('error', 'Doctor is not available at this time.');
        }

        // Book the appointment
        Appointment::create([
            'doctor_id' => $request->doctor_id,
            'patient_id' => $patient_id,
            'appointment_date' => $request->appointment_date,
            'appointment_time' => $request->appointment_time,
            'status' => 'Pending',
        ]);

        return redirect()->route('appointments.index')->with('success', 'Appointment booked successfully.');
    }
	public function show($id){
		$appointment = Appointment::find($id);
		return view("pages.erp.appointment.show",["appointment"=>$appointment]);
	}
	public function edit(Appointment $appointment){
		return view("pages.erp.appointment.edit",["appointment"=>$appointment,"status"=>Status::all()]);
	}
	public function update(Request $request,Appointment $appointment){
		//Appointment::update($request->all());
		$appointment = Appointment::find($appointment->id);
		$appointment->id=$request->id;
		$appointment->doctor_id=$request->doctor_id;
		$appointment->patient_id=$request->patient_id;
		$appointment->appointment_date=$request->appointment_date;
		$appointment->appointment_time=$request->appointment_time;
		$appointment->status_id=$request->status_id;
		$appointment->cancellation_reason=$request->cancellation_reason;
date_default_timezone_set("Asia/Dhaka");
		$appointment->created_at=date('Y-m-d H:i:s');
date_default_timezone_set("Asia/Dhaka");
		$appointment->updated_at=date('Y-m-d H:i:s');

		$appointment->save();

		return redirect()->route("appointments.index")->with('success','Updated Successfully.');
	}
	public function destroy(Appointment $appointment){
		$appointment->delete();
		return redirect()->route("appointments.index")->with('success', 'Deleted Successfully.');
	}
}
?>
